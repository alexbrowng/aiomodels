[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aiomodels"
version = "0.1.0"
description = "Async llm models"
readme = "README.md"
authors = [
    {name = "Alejandro Castaño González", email = "unocongafas@gmail.com"}
]
requires-python = ">=3.12"
dependencies = [
    "aioboto3==15.0.0",
    "anthropic==0.57.1",
    "httpx==0.28.1",
    "openai==1.93.0",
    "types-aioboto3[bedrock-runtime]==15.0.0",
]

[project.scripts]
chat = "aiomodels.cli.chat:main"

[dependency-groups]
quality = [
    "ruff==0.11.7"
]
test = [
    "coverage==7.9.2",
    "openai-responses==0.12.0",
    "pytest==8.4.1",
    "pytest-asyncio==1.0.0",
    "respx==0.22.0",
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-vv -m 'not wip' -x -s --disable-warnings"
cache_dir = ".cache/pytest"
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["tests/"]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
branch = true
source = ["aiomodels"]
data_file = ".cache/coverage"

[tool.coverage.report]
ignore_errors = true
show_missing = true
fail_under = 60
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]
omit = [
    "*/tests/*",
    "*/*__init__.py"
]

[tool.ruff]
cache-dir = ".cache/ruff"
line-length = 119
lint.select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "N", # pep8-naming
    "S", # flake8-bandit
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "DTZ", # flake8-datetimez
    "PTH", # flake8-use-pathlib
    "I", # isort
]
lint.ignore = [
    "B024", # abstract base class has no abstract methods
    "D100", # Missing module docstring
    "D101", # Missing function docstring
    "D102", # Missing method docstring
    "D103", # Missing docstring in public function or method
    "D104", # Missing docstring in public class
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class or function
    "D107", # Missing docstring in __init__
    "S101",
]
lint.fixable = ["ALL"]
lint.unfixable = []
exclude = [".cache"]
